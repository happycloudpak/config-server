#!/bin/bash

echo "************* DEPLOY service *****************"

# get parameters
echo "STEP1: Get Parameters"

if ([ $# -lt 2 ]) || ([ $# -eq 1 ] && [ "$1" == "-h" -o "$1" == "--help" ]); then
  echo "deploy <k8s-context> <root directory> <profile>"
  echo " k8s-context: 사용할 k8s context명. kubectl config view로 context 목록 확인. '.'은 현재 컨텍스트 의미함 "
  echo " root directory: project의 최상위 디렉토리. '.'은 현재 디렉토리 의미함. "
  echo " profile: 배포대상 환경 프로파일(ex:dev, prod). 생략 시 application.yml의 spring.profiles.active값 참조 "
  echo " ex) ./deploy kubernetes-admin@kubernetes ~/work prod"
  echo " ex) ./deploy . ."
  exit 2
fi

context=$1
basedir=$2
if [ $# -eq 3 ]; then
	profile=$3
else
	profile=`cat ${basedir}/src/main/resources/application.yml | grep "active: " | cut -d ":" -f2 | tr -d " "`
fi

if [ "${context}" == "." ]; then
	context=`kubectl config current-context`
fi
echo ""
 
# set variables from config.properties: converted from '.' to '_'
echo "STEP2. Set environment variables "

eval $(${basedir}/cicd/setenv ${basedir}/src/main/resources/config/application-common.properties)
if [ "${profile}" != "" ]; then
	eval $(${basedir}/cicd/setenv ${basedir}/src/main/resources/config/application-${profile}.properties)
fi
echo ""

# switch kubenetes context
echo "STEP3. Switch to kubernetes context "

kubectl config use-context ${context}
echo ""

# check current version
echo "STEP4. Delete application if same version exists "

CURTAG=$(kubectl get deploy ${image_repository} -o yaml | grep "image: ${image_registry}/${image_project}/${image_repository}:" | cut -d ':' -f3)
echo "FIND CURRENT VERSION: ${CURTAG}"

# 동일한 서비스의 동일한 버전이 있으면 변경내용 반영위해 기존 deployment 삭제
if [ $? -eq 0 ] && [ "${CURTAG}" == "${image_tag}" ]; then
    echo "[${image_repository}] Same version(${image_tag}) service exists!"

    kubectl delete deploy --selector="app=${image_repository}"
fi
echo ""

# configmap revise
echo "STEP5. Create ConfigMap "

cm="${image_repository}-cm-common"
kubectl get configmap ${cm} 2> /dev/null
if [ $? -eq 0 ]; then
  kubectl delete configmap ${cm}
fi
kubectl create configmap ${cm} --from-env-file=${basedir}/src/main/resources/config/application-common.properties
if [ $? -eq 1 ]; then
  echo "FAIL to create configmap ${cm}!"
  exit 2
fi
cm="${image_repository}-cm-${profile}"
kubectl get configmap ${cm} 2> /dev/null
if [ $? -eq 0 ]; then
  kubectl delete configmap ${cm}
fi
kubectl create configmap ${cm} --from-env-file=${basedir}/src/main/resources/config/application-${profile}.properties
if [ $? -eq 1 ]; then
  echo "FAIL to create configmap ${cm}!"
  exit 2
fi
echo ""

# secret revise
echo "STEP6. Create Secret "

secret="${image_repository}-secret"
kubectl get secret ${secret} 2> /dev/null
if [ $? -eq 0 ]; then
  kubectl delete secret ${secret}
fi
kubectl create secret generic ${secret} --from-env-file=${basedir}/src/main/resources/config/application-secret.properties
if [ $? -eq 1 ]; then
  echo "FAIL to create secret ${secret}!"
  exit 2
fi
echo ""

# deploy.yaml을 이용하여 배포 yaml생성
echo "STEP7. Deploy application "

IMG="${image_registry}\/${image_project}\/${image_repository}:${image_tag}"
sed "s@{{ SERVICE_NAME }}@${image_repository}@g" ${basedir}/cicd/deploy.yaml | \
sed "s@{{ IMAGE_NAME }}@${IMG}@g" - | \
sed "s@{{ SERVICE_TARGET_PORT }}@${service_target_port}@g" - | \
sed "s@{{ SERVICE_PORT }}@${service_port}@g" - | \
sed "s@{{ SERVICE_REPLICAS }}@${service_replicas}@g" - | \
sed "s@{{ EUREKA_SERVERS }}@${eureka_servers}@g" - | \
sed "s@{{ PROFILE }}@${profile}@g" - | \
sed "s@{{ SERVICE_HOST }}@${service_host}@g" - > ${basedir}/cicd/deploy-converted.yaml

if [ $? -eq 0 ]; then
    kubectl apply -f ${basedir}/cicd/deploy-converted.yaml
else
    echo "******** FAIL to convert deployment yaml !!! ******** "
fi
